#!/usr/bin/env python3

import os
import subprocess
import sys
import platform
import tarfile

def install_gitleaks():
    print("Installing Gitleaks...")
    
    os_type = platform.system()
    arch = platform.machine()
    try:
        if os_type == "Linux":
            if arch == "x86_64":
                subprocess.run(['curl', '-sSfL', 'https://github.com/gitleaks/gitleaks/releases/download/v8.16.4/gitleaks_8.16.4_linux_x64.tar.gz', '-o', 'gitleaks.tar.gz'], check=True)
                subprocess.run(['tar', '-xzf', 'gitleaks.tar.gz', 'gitleaks'], check=True)           
            elif arch == "arm64":
                subprocess.run(['curl', '-sSfL', 'https://github.com/gitleaks/gitleaks/releases/download/v8.16.4/gitleaks_8.16.4_linux_arm64.tar.gz', '-o', 'gitleaks.tar.gz'], check=True)
                subprocess.run(['tar', '-xzf', 'gitleaks.tar.gz', 'gitleaks'], check=True)    
            else:
                print("Couldn't install Gitleaks. The operating system is not supported.")
                sys.exit(1)    
        elif os_type == "Darwin":
            if arch == "x86_64":
                subprocess.run(['curl', '-sSfL', 'https://github.com/gitleaks/gitleaks/releases/download/v8.16.4/gitleaks_8.16.4_darwin_x64.tar.gz', '-o', 'gitleaks.tar.gz'], check=True)
                subprocess.run(['tar', '-xzf', 'gitleaks.tar.gz', 'gitleaks'], check=True)           
            elif arch == "arm64":
                subprocess.run(['curl', '-sSfL', 'https://github.com/gitleaks/gitleaks/releases/download/v8.16.4/gitleaks_8.16.4_darwin_arm64.tar.gz', '-o', 'gitleaks.tar.gz'], check=True)
                subprocess.run(['tar', '-xzf', 'gitleaks.tar.gz', 'gitleaks'], check=True)
            else:
                print("Couldn't install Gitleaks. The operating system is not supported.")
                sys.exit(1)       
        else:
            print("Couldn't install Gitleaks. The operating system is not supported.")
            sys.exit(1)
        
        subprocess.run(['chmod', '+x', 'gitleaks'], check=True)
        os.environ["PATH"] += os.pathsep + os.getcwd()
        print("Gitleaks installed")
    except Exception as e:
        print(f"Error installing Gitleaks: {e}")
        sys.exit(1)

def check_gitleaks_installed():
    try:
        subprocess.run(['./gitleaks', 'version'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except FileNotFoundError:
        install_gitleaks()

def check_gitleaks_enabled():
    out = subprocess.getoutput("git config --bool hooks.gitleaks")
    if out == "false":
        return False
    return True

def run_gitleaks():
    try:
        result = subprocess.run(['./gitleaks', 'protect', '-v', '--staged'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode != 0:
            print("Found secrets in the code. Commit rejected.")
            print(result.stdout.decode())
            sys.exit(1)
        else:
            print("Gitleaks check passed. No secrets found.")
    except Exception as e:
        print(f"Error running Gitleaks: {e}")
        sys.exit(1)

def main():
    check_gitleaks_installed()
    if check_gitleaks_enabled():
        run_gitleaks()

if __name__ == '__main__':
    main()